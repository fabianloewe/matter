Type < Matter:
  Content:
    attributes  = [ Attributes ]
    variables   = [ Variables ]
    methods     = [ Methods ]
    signals     = [ Signals ]

  Behavior:
    in elements.Behavior lookup:
      Expressions.Assignment
      Expressions.ForLoop
      Expressions.If

  Attributes < Matter:
    Content:
      attributes = { AttributeLiteral }+
    Behavior:
      outer.attributes = attributes

  Variables < Matter:
    Content:
      variables = { VariableDeclaration }+
    Behavior:
      variables.append x
      for var in variables:
        var.name += "-variable"
      outer.variables = variables
	  
	Variable < Matter:
	  // No content so nothing has to be defined when opened.
	  // This means this matterType doesn't have to be opened when somewhere expected.
	  Behavior:
		// When a lookup is performed by some Content definition 
		// check Content of VariableContent
		on lookup ->
		  lookup VariableContent  
	  
	  VariableContent < Matter:
		Content:
		  name = a-z [ a-z0-9 | "-" ]
		

  Variables:
    id: Int

  Methods < Matter:
    Content:
      methods = { MethodDefinition }+
    Behavior:
      outer.methods = methods
	  
	MethodDefinition < Statement:
	  Content:
		definition = Variable "(" { Variable " " TypeName [ ", " ] }* ")" [ " -> " TypeName ] 

  Signals < Matter:
    Content:
      signals = { SignalDeclaration }+
    Behavior:
      outer.signals = signals

Class < Type:
  Content:
    [ Generics ]
    [ Traits ]
    Type.Content
  Behavior:
    Type.Behavior

    create generics: Array of TypeAlias

  Attributes:
    @compiler
    @runtime
  Variables:
    id: Int
	
  Construction < Matter:
    Content:
      parameters = { ParamterStatement }+
	Behavior:
	  methods.append Method:
		name = "construct"
		arguments = parameters.each _.variable
    
    ParameterStatement < Statement:
	  Content:
	    variable 	= "with" Variable ":"
		expressions = { "  " Expression }+

  Generics < Matter:
    Content:
      generics = { TypeAlias }+
    Behavior:
      outer.generics = generics

  Traits < Matter:
    Content:
      traits = { Trait }+
    Behavior:
      outer.traits = traits

Array < Class:
  Generics:
    T ~ Type
  Variables:
    buffer: Pointer
    size: Int
  Methods:
    construct -> Array<T>:
